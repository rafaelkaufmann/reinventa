{"version":3,"file":"/packages/jquery-gantt.js","sources":["jquery-gantt/lib/jquery.fn.gantt.js"],"names":[],"mappings":";;;;;;;;AAAA,qB;AACA,qB;;AAEA,e;;AAEA,8B;AACA,qC;AACA,2B;AACA,8B;AACA,+B;AACA,yC;AACA,0D;AACA,c;AACA,6C;AACA,4D;AACA,c;AACA,kC;AACA,8C;AACA,a;AACA,W;;AAEA,E;AACA,+E;AACA,0B;;AAEA,iB;;AAEA,qC;;AAEA,0C;AACA,0D;AACA,0B;AACA,wB;AACA,uB;AACA,4B;AACA,+I;AACA,qD;AACA,gC;AACA,0B;AACA,6B;AACA,+B;AACA,8B;AACA,uC;AACA,qD;AACA,oD;AACA,6C;AACA,+B;AACA,U;;AAEA,W;AACA,4C;AACA,U;AACA,sB;AACA,wC;AACA,S;;AAEA,oD;AACA,0E;;AAEA,2E;AACA,U;AACA,4E;AACA,6E;AACA,yD;AACA,+B;AACA,yC;AACA,sD;AACA,yC;AACA,kC;AACA,6C;AACA,6E;AACA,6E;AACA,6E;AACA,qD;AACA,a;AACA,W;AACA,6E;AACA,+B;AACA,0C;AACA,sD;AACA,yC;AACA,kC;AACA,6C;AACA,iF;AACA,qD;AACA,iC;AACA,a;AACA,W;AACA,+E;AACA,+B;AACA,2C;AACA,sD;AACA,4D;AACA,yC;AACA,kC;AACA,6C;AACA,qD;AACA,iC;AACA,a;AACA,W;;AAEA,iC;AACA,iC;;AAEA,gF;AACA,mC;AACA,mD;AACA,gD;AACA,uC;AACA,yD;AACA,oC;AACA,sC;AACA,oB;AACA,a;AACA,uC;AACA,U;;AAEA,4E;AACA,wC;AACA,iD;AACA,qC;AACA,6B;AACA,0C;AACA,6B;AACA,0D;AACA,8B;AACA,sF;AACA,wB;AACA,0C;AACA,a;AACA,U;;AAEA,6D;AACA,mD;AACA,wD;AACA,mF;AACA,mD;AACA,U;;AAEA,+D;AACA,oD;AACA,wD;AACA,mF;AACA,kC;AACA,sE;AACA,a;AACA,kE;AACA,4C;;AAEA,U;;AAEA,iE;AACA,qD;AACA,oF;AACA,U;;AAEA,0E;AACA,2D;AACA,8C;AACA,8C;AACA,mD;AACA,8C;AACA,yD;;AAEA,kD;AACA,4B;AACA,oB;AACA,2I;AACA,a;AACA,U;;AAEA,2E;AACA,kC;AACA,oD;AACA,8C;AACA,mD;AACA,8C;AACA,yD;AACA,8G;AACA,8D;AACA,oB;AACA,8D;AACA,a;AACA,U;;AAEA,kE;AACA,yD;AACA,0D;AACA,qD;AACA,sF;;AAEA,mE;AACA,oC;AACA,iB;;AAEA,iJ;AACA,sF;AACA,a;AACA,S;;AAEA,0B;AACA,0B;;AAEA,kE;AACA,oB;AACA,gF;AACA,0C;AACA,kD;AACA,8C;AACA,2D;AACA,4C;AACA,gD;AACA,gD;AACA,+D;AACA,sB;AACA,iB;AACA,6C;AACA,wC;AACA,kD;AACA,iD;AACA,2D;AACA,kB;AACA,iB;;AAEA,mC;AACA,wC;;AAEA,yE;AACA,yD;AACA,0D;AACA,mD;AACA,uC;AACA,wB;AACA,kE;AACA,8C;AACA,2C;AACA,uB;AACA,iB;AACA,c;;AAEA,yC;AACA,4E;AACA,mD;AACA,sC;AACA,sD;AACA,uF;AACA,yI;;AAEA,8D;AACA,4D;;;AAGA,2C;AACA,sF;AACA,c;;AAEA,kC;AACA,wC;AACA,6D;AACA,yD;AACA,2C;AACA,uE;AACA,gC;;AAEA,4C;AACA,yD;;AAEA,gE;;AAEA,8E;;AAEA,yD;;AAEA,qH;AACA,kG;;AAEA,gG;;AAEA,sC;AACA,+D;;AAEA,sE;AACA,yC;AACA,oE;AACA,6B;AACA,+C;AACA,qB;AACA,iB;;AAEA,kD;AACA,6C;AACA,oD;AACA,iD;AACA,yE;AACA,wB;AACA,oD;AACA,oD;AACA,+E;AACA,qF;AACA,uD;AACA,2E;AACA,wE;AACA,qD;AACA,yD;AACA,gC;AACA,wF;AACA,qF;AACA,yB;AACA,sD;AACA,4B;AACA,sD;AACA,qB;AACA,iB;;AAEA,gE;AACA,gD;AACA,oC;AACA,c;;AAEA,2D;AACA,2C;AACA,gC;AACA,kE;AACA,0D;AACA,mF;AACA,2C;;AAEA,iC;AACA,0D;AACA,gJ;AACA,sM;AACA,6I;AACA,+C;;AAEA,yC;AACA,kI;AACA,iJ;AACA,mD;AACA,yB;;AAEA,qB;AACA,mB;AACA,wD;AACA,sC;AACA,c;;AAEA,uD;AACA,kD;AACA,8F;;AAEA,wE;AACA,mI;AACA,qF;;AAEA,8E;AACA,2B;AACA,8C;;AAEA,wC;AACA,yD;AACA,4E;AACA,4E;AACA,6C;AACA,qC;AACA,4D;AACA,kC;AACA,sC;AACA,wD;AACA,kC;AACA,qC;AACA,4D;AACA,kC;AACA,oC;AACA,4D;AACA,kC;AACA,gC;AACA,4D;AACA,kC;AACA,qB;;AAEA,mD;AACA,iE;AACA,sB;;AAEA,uD;AACA,6F;AACA,sD;AACA,uD;AACA,gD;AACA,4B;AACA,qC;AACA,qB;;AAEA,iD;AACA,oD;AACA,+G;AACA,sD;AACA,kE;AACA,gD;AACA,4B;AACA,qC;AACA,qB;AACA,8C;;AAEA,gF;AACA,gE;AACA,mD;AACA,mB;AACA,iC;AACA,c;;AAEA,8E;AACA,qB;AACA,4E;;AAEA,iC;AACA,0D;AACA,oE;AACA,0E;AACA,mG;AACA,wE;;AAEA,qD;AACA,mC;;AAEA,sD;AACA,oC;;AAEA,gC;;AAEA,mC;;AAEA,gC;;AAEA,gC;;;AAGA,uC;AACA,yF;;AAEA,0E;AACA,yC;AACA,gC;AACA,iC;;AAEA,4G;;AAEA,0D;AACA,wD;AACA,2C;;AAEA,2E;AACA,gD;;AAEA,yC;AACA,yD;AACA,+C;AACA,6C;AACA,kF;AACA,0E;AACA,uE;AACA,8C;AACA,2D;;AAEA,2C;AACA,+C;AACA,6B;AACA,yC;;;AAGA,0C;AACA,qD;AACA,+C;AACA,8C;AACA,mF;AACA,sG;AACA,4D;AACA,uD;;AAEA,2C;AACA,gD;AACA,6B;AACA,0C;;;AAGA,gD;;AAEA,wD;AACA,sD;AACA,8D;AACA,wD;AACA,sD;AACA,6B;AACA,qD;AACA,iJ;;AAEA,uF;AACA,yG;AACA,sG;AACA,sF;AACA,yG;AACA,6G;;AAEA,2C;AACA,+C;AACA,6B;AACA,yC;;AAEA,8D;AACA,+C;AACA,iD;AACA,oD;AACA,8I;AACA,qD;AACA,sD;AACA,yB;;;AAGA,oC;AACA,qC;AACA,yE;AACA,8F;AACA,kC;AACA,8C;;AAEA,qC;AACA,sC;AACA,0E;AACA,8F;AACA,oD;AACA,8C;;AAEA,+D;;AAEA,qD;AACA,kD;AACA,yB;;AAEA,8E;AACA,iG;AACA,8F;;AAEA,6E;AACA,iG;AACA,2G;;AAEA,oG;;;AAGA,gD;AACA,2D;AACA,4D;AACA,wF;AACA,wF;AACA,wF;;AAEA,8B;;AAEA,gC;AACA,iC;AACA,0F;AACA,yD;AACA,0D;AACA,0D;AACA,wD;AACA,2C;;AAEA,2E;AACA,gD;;AAEA,yC;AACA,8D;AACA,6C;AACA,kF;AACA,0E;AACA,uE;AACA,8C;AACA,2D;AACA,0D;AACA,+C;AACA,6B;AACA,yC;;AAEA,0C;AACA,4D;AACA,8C;AACA,kF;AACA,0E;AACA,sE;AACA,+D;AACA,0D;AACA,wD;AACA,gD;AACA,6B;AACA,0C;;AAEA,yC;AACA,kE;AACA,qJ;AACA,yG;AACA,yB;;;AAGA,oC;AACA,qC;AACA,yE;AACA,8F;AACA,kC;AACA,8C;;AAEA,qC;AACA,sC;AACA,0E;AACA,8F;AACA,oD;AACA,8C;;AAEA,oG;;AAEA,qH;;AAEA,8B;;AAEA,iC;AACA,kC;AACA,2F;;AAEA,0D;AACA,wD;AACA,2C;;AAEA,2E;AACA,gD;;AAEA,yC;AACA,8D;AACA,6C;AACA,kF;AACA,0E;AACA,uE;AACA,8C;AACA,2D;AACA,0D;AACA,+C;AACA,6B;AACA,yC;AACA,kO;AACA,yB;;;AAGA,oC;AACA,qC;AACA,yE;AACA,8F;AACA,kC;AACA,8C;;AAEA,qC;AACA,sC;AACA,0E;AACA,8F;AACA,oD;AACA,8C;;AAEA,oG;;AAEA,gD;AACA,2D;AACA,4D;AACA,wF;AACA,wF;;AAEA,8B;;AAEA,yC;AACA,4B;AACA,yF;;AAEA,sE;AACA,4D;AACA,0D;AACA,+D;;AAEA,2E;AACA,gD;;AAEA,yC;AACA,8D;AACA,6C;AACA,iF;AACA,0E;AACA,uE;AACA,8C;AACA,2D;AACA,0D;AACA,+C;AACA,6B;AACA,yC;;AAEA,0C;AACA,4D;AACA,8C;AACA,kF;AACA,0E;AACA,sE;AACA,+D;AACA,0D;AACA,wD;AACA,gD;AACA,6B;AACA,0C;;AAEA,uD;AACA,6D;AACA,0D;AACA,sD;AACA,6B;;AAEA,kF;AACA,mK;AACA,mG;AACA,iF;AACA,2H;AACA,yG;AACA,+B;;AAEA,oC;AACA,qC;AACA,yE;AACA,8F;AACA,kC;AACA,8C;;AAEA,qC;AACA,sC;AACA,0E;AACA,8F;AACA,oD;AACA,8C;;AAEA,oG;;;AAGA,gD;;AAEA,2D;AACA,4D;AACA,iH;AACA,iH;;AAEA,8B;AACA,iB;;AAEA,6E;AACA,c;;AAEA,6B;AACA,4C;AACA,yC;AACA,8D;AACA,+C;AACA,qD;AACA,iE;AACA,+D;AACA,wE;AACA,mG;AACA,iD;AACA,wD;AACA,uE;AACA,uC;AACA,uE;AACA,4D;AACA,qG;AACA,mG;AACA,iD;AACA,wD;AACA,sE;AACA,uC;AACA,6F;AACA,oD;AACA,wD;AACA,wE;AACA,uC;AACA,mG;AACA,qD;AACA,wD;AACA,yE;AACA,8F;AACA,+E;AACA,+F;AACA,gF;AACA,+F;AACA,iF;AACA,8F;AACA,yC;AACA,uC;AACA,kG;AACA,iD;AACA,wD;AACA,yE;AACA,8F;AACA,+E;AACA,8F;AACA,gF;AACA,8F;AACA,iF;AACA,8F;AACA,yC;AACA,wC;AACA,2E;AACA,+E;AACA,wF;AACA,iD;AACA,yE;AACA,uE;AACA,sG;AACA,kF;AACA,kD;AACA,yE;AACA,qG;AACA,sF;AACA,qD;AACA,kD;AACA,6C;AACA,yC;AACA,yE;AACA,kG;AACA,iD;AACA,wD;AACA,yE;AACA,+F;AACA,+E;AACA,+F;AACA,gF;AACA,+F;AACA,iF;AACA,+F;AACA,yC;AACA,uC;AACA,+F;AACA,qD;AACA,wD;AACA,yE;AACA,+F;AACA,+E;AACA,gG;AACA,gF;AACA,gG;AACA,iF;AACA,+F;AACA,yC;AACA,uC;AACA,gG;AACA,kD;AACA,wD;AACA,oE;AACA,uC;AACA,iG;AACA,kD;AACA,wD;AACA,mE;AACA,uC;AACA,qC;AACA,kC;AACA,qD;AACA,2E;AACA,uB;AACA,2F;AACA,wB;AACA,iE;AACA,2F;AACA,yC;AACA,gD;AACA,+D;AACA,+B;AACA,+D;AACA,oD;AACA,6F;AACA,2F;AACA,yC;AACA,gD;AACA,8D;AACA,+B;AACA,uF;AACA,+C;AACA,gD;AACA,kE;AACA,+B;AACA,2F;AACA,6C;AACA,gD;AACA,kF;AACA,+B;AACA,0F;AACA,yC;AACA,gD;AACA,8E;AACA,+B;AACA,qF;AACA,4C;AACA,gD;AACA,gE;AACA,+B;AACA,0F;AACA,yC;AACA,gD;AACA,mF;AACA,+B;AACA,2F;AACA,6C;AACA,gD;AACA,mF;AACA,+B;AACA,qF;AACA,+C;AACA,gD;AACA,gE;AACA,+B;AACA,wF;AACA,0C;AACA,gD;AACA,4D;AACA,+B;AACA,yF;AACA,0C;AACA,gD;AACA,2D;AACA,gC;AACA,iB;AACA,wE;AACA,c;;AAEA,+B;AACA,2E;AACA,+B;AACA,2E;AACA,oD;AACA,gE;AACA,+F;AACA,sC;AACA,8B;AACA,qE;AACA,0B;AACA,kD;;AAEA,2B;AACA,uB;AACA,+C;AACA,mF;AACA,iD;AACA,oD;AACA,mD;AACA,sC;AACA,wB;AACA,6C;AACA,uD;AACA,wB;AACA,+C;AACA,mE;AACA,uE;AACA,yB;AACA,iB;AACA,wC;AACA,wC;AACA,kE;AACA,mB;AACA,2B;AACA,c;;AAEA,2E;AACA,sE;AACA,yC;AACA,yC;AACA,iC;AACA,wD;AACA,oE;AACA,uG;AACA,8B;AACA,kC;AACA,0H;AACA,8B;AACA,4B;AACA,wD;AACA,oE;AACA,sG;AACA,8B;AACA,iB;AACA,c;;AAEA,iC;AACA,qD;AACA,qF;AACA,qD;AACA,yB;AACA,6E;AACA,uD;AACA,wD;AACA,wD;AACA,wD;AACA,iG;AACA,+E;AACA,mC;AACA,kC;AACA,qB;AACA,kB;AACA,6E;AACA,0D;AACA,gJ;;AAEA,gE;AACA,4C;;AAEA,qD;AACA,kD;AACA,6C;AACA,0H;AACA,+E;;AAEA,sH;AACA,2E;;AAEA,oE;AACA,gE;AACA,iG;;AAEA,kE;AACA,mD;AACA,uF;AACA,yE;AACA,2E;AACA,gF;AACA,8C;;AAEA,+C;AACA,kF;;AAEA,+G;AACA,wF;;AAEA,2D;AACA,0C;;AAEA,kD;AACA,6C;AACA,iF;AACA,6E;;AAEA,2F;AACA,6E;AACA,qC;;AAEA,2F;AACA,6E;AACA,qC;;AAEA,uF;AACA,yE;AACA,qC;;AAEA,yF;;AAEA,oE;;AAEA,qF;AACA,gE;;AAEA,iG;;AAEA,kE;AACA,gD;AACA,oF;AACA,sE;AACA,wE;AACA,4E;AACA,0C;;AAEA,+C;AACA,kF;;AAEA,+G;AACA,wF;;AAEA,2D;AACA,0C;;AAEA,mD;AACA,8C;AACA,iF;AACA,6E;;AAEA,2F;AACA,6E;AACA,qC;;AAEA,2F;AACA,6E;AACA,qC;;AAEA,uF;AACA,yE;AACA,qC;;AAEA,uG;AACA,oE;AACA,mG;AACA,gE;AACA,iG;;AAEA,kE;AACA,2C;AACA,+E;AACA,iE;AACA,mE;AACA,wE;AACA,sC;;AAEA,+C;AACA,kF;;AAEA,+G;AACA,wF;;AAEA,2D;AACA,0C;;AAEA,2C;AACA,wC;AACA,uG;AACA,mG;;AAEA,+E;AACA,oE;;AAEA,qG;AACA,kE;AACA,mD;AACA,uF;AACA,yE;AACA,2E;AACA,gF;AACA,0C;;AAEA,+C;AACA,kF;;AAEA,+G;AACA,wF;;AAEA,2D;;AAEA,0C;AACA,6B;AACA,4D;AACA,oD;AACA,sF;AACA,sD;AACA,4C;AACA,oD;AACA,6B;AACA,2B;;AAEA,qB;AACA,mB;AACA,c;AACA,6B;AACA,iD;AACA,2E;AACA,gE;AACA,0D;AACA,wD;;AAEA,8B;AACA,iC;AACA,4C;AACA,gD;AACA,mF;AACA,iE;AACA,8B;AACA,+B;AACA,qE;AACA,0E;AACA,4C;AACA,6D;AACA,mF;AACA,8B;AACA,+B;AACA,uG;AACA,yC;AACA,yB;AACA,+E;AACA,uF;AACA,qG;AACA,kC;AACA,sC;AACA,oC;AACA,oD;AACA,2C;AACA,yB;AACA,4C;AACA,qD;AACA,kE;AACA,mE;AACA,8B;AACA,4B;AACA,+E;AACA,uF;AACA,+D;AACA,0D;AACA,gD;AACA,yD;AACA,sE;AACA,yB;AACA,mE;AACA,8B;AACA,iB;AACA,c;;AAEA,0C;AACA,mD;AACA,mI;AACA,gE;AACA,+C;AACA,2G;AACA,sD;AACA,2C;AACA,uB;AACA,iB;AACA,c;;AAEA,gC;AACA,gD;AACA,4D;;AAEA,2C;;AAEA,8D;AACA,6E;AACA,+C;AACA,wD;AACA,sE;AACA,uC;AACA,uC;AACA,qC;AACA,qE;AACA,wC;AACA,uC;AACA,qC;AACA,sE;AACA,wC;AACA,uC;AACA,qC;AACA,uE;AACA,yC;AACA,uC;AACA,qC;AACA,sE;AACA,uC;AACA,uC;AACA,qC;AACA,uE;AACA,wC;AACA,uC;AACA,qC;AACA,qB;;AAEA,mG;AACA,0G;AACA,2C;AACA,+B;AACA,qB;AACA,gD;AACA,2C;AACA,oD;AACA,+E;AACA,oE;AACA,wF;AACA,uF;;AAEA,6C;AACA,kF;AACA,0C;AACA,qE;AACA,qB;AACA,uC;AACA,mB;AACA,c;;AAEA,wC;AACA,gD;AACA,yE;AACA,iD;AACA,+C;AACA,gH;AACA,2C;AACA,0D;;AAEA,iD;;AAEA,uE;AACA,yG;AACA,c;;AAEA,wC;AACA,gD;AACA,0D;;AAEA,8D;AACA,wD;AACA,sG;AACA,kH;AACA,uD;;AAEA,iH;AACA,sH;AACA,2D;;AAEA,uD;;AAEA,uE;AACA,yG;AACA,c;;AAEA,4C;AACA,iD;AACA,oE;AACA,0E;AACA,2E;AACA,gE;;AAEA,+C;AACA,gD;AACA,oD;;AAEA,+B;;AAEA,gF;AACA,8C;AACA,4C;AACA,mD;;AAEA,qE;;AAEA,yD;AACA,oC;AACA,6D;AACA,iE;AACA,+D;AACA,yE;AACA,0E;AACA,4B;AACA,mE;AACA,oE;AACA,qB;AACA,2E;AACA,4G;AACA,iB;AACA,c;;AAEA,0C;AACA,oD;AACA,0D;AACA,iC;AACA,iB;AACA,8F;AACA,uC;AACA,6D;AACA,4H;AACA,sF;AACA,qG;AACA,4H;AACA,wB;AACA,wE;AACA,4H;AACA,iB;AACA,kD;AACA,c;;AAEA,mC;AACA,qD;AACA,qD;AACA,+E;AACA,oE;AACA,wE;AACA,2E;;AAEA,oD;AACA,qD;;AAEA,yE;AACA,iC;AACA,wD;AACA,+E;AACA,qB;AACA,gF;AACA,yH;AACA,qD;AACA,iB;AACA,c;;AAEA,qC;AACA,iD;AACA,wC;AACA,mC;AACA,mC;AACA,2E;AACA,4B;AACA,mF;AACA,oE;AACA,qB;;AAEA,6C;AACA,gH;AACA,qB;AACA,wB;AACA,c;;AAEA,yB;AACA,sD;AACA,2B;AACA,iD;AACA,qD;AACA,sD;;AAEA,0C;AACA,0E;AACA,qH;AACA,qB;AACA,sD;AACA,wC;;AAEA,wB;AACA,yC;AACA,gD;AACA,qB;AACA,0C;AACA,iB;AACA,a;AACA,U;;AAEA,4B;AACA,4B;AACA,qB;;AAEA,+E;AACA,4C;AACA,mC;AACA,0D;AACA,6D;AACA,sH;AACA,uB;AACA,mB;AACA,gD;AACA,yC;AACA,iC;AACA,kH;AACA,qF;AACA,8B;AACA,iC;AACA,6D;AACA,4E;AACA,kE;AACA,mG;AACA,8B;AACA,kC;AACA,wF;AACA,uD;AACA,+E;AACA,8B;AACA,4B;AACA,4C;AACA,+D;AACA,8B;AACA,iB;AACA,+B;AACA,c;;AAEA,+E;AACA,4C;AACA,mC;AACA,0D;AACA,6D;AACA,8I;AACA,uB;AACA,mB;AACA,gD;AACA,yC;AACA,iC;AACA,mH;AACA,qF;AACA,8B;AACA,iC;AACA,6D;AACA,4E;AACA,kE;AACA,mG;AACA,8B;AACA,kC;AACA,wF;AACA,uD;AACA,+E;AACA,8B;AACA,4B;AACA,4C;AACA,+D;AACA,8B;AACA,iB;AACA,+B;AACA,c;;AAEA,sE;AACA,iD;AACA,uD;AACA,mE;AACA,6B;AACA,0B;AACA,oB;AACA,2D;AACA,2D;AACA,4D;AACA,2B;;AAEA,c;;AAEA,uE;AACA,4B;AACA,4D;AACA,6C;AACA,uC;;AAEA,gC;AACA,2C;AACA,sC;AACA,sC;AACA,oC;;AAEA,uC;AACA,kC;AACA,iE;AACA,sC;AACA,oC;AACA,uE;AACA,iB;AACA,8B;;AAEA,6B;AACA,0B;AACA,yB;AACA,yD;AACA,oG;;AAEA,8E;AACA,4F;AACA,iD;AACA,qB;AACA,0C;;AAEA,0F;AACA,gE;;AAEA,2G;AACA,6E;AACA,+D;AACA,2C;AACA,qB;AACA,sB;;AAEA,mC;AACA,sE;AACA,iC;;AAEA,wB;AACA,iB;;AAEA,2B;AACA,c;;AAEA,uE;AACA,sC;AACA,kD;;AAEA,6C;AACA,yD;;AAEA,6B;AACA,0B;AACA,oB;AACA,iD;AACA,2D;AACA,qB;AACA,2D;AACA,4D;;AAEA,2B;AACA,c;;;AAGA,wE;AACA,sC;AACA,mD;;AAEA,6C;AACA,yD;;AAEA,6B;AACA,0B;AACA,oB;AACA,sF;AACA,6D;AACA,4D;;AAEA,2B;AACA,c;;AAEA,0D;AACA,8C;AACA,+C;AACA,kE;AACA,iF;AACA,iB;AACA,wC;AACA,c;;AAEA,wC;AACA,qC;AACA,wC;AACA,yC;AACA,iC;AACA,gD;AACA,oD;AACA,8F;AACA,yB;AACA,sG;AACA,iC;AACA,gD;AACA,kE;AACA,6C;AACA,kD;AACA,gC;AACA,yB;AACA,2C;AACA,kC;AACA,oE;AACA,4B;AACA,gG;AACA,iB;AACA,c;;AAEA,yF;AACA,8C;AACA,gC;AACA,wE;AACA,4D;AACA,8D;AACA,iB;AACA,8B;AACA,c;AACA,6F;AACA,4C;AACA,+E;AACA,yC;AACA,uD;AACA,iB;AACA,qC;AACA,kG;AACA,uC;AACA,oC;AACA,yE;AACA,qB;AACA,sC;AACA,qF;AACA,yC;AACA,4B;AACA,iG;AACA,sB;AACA,kB;AACA,iB;;AAEA,wC;AACA,+B;AACA,sC;AACA,0C;AACA,qC;AACA,iJ;AACA,sB;AACA,8E;AACA,4D;AACA,iB;AACA,0C;AACA,c;;AAEA,sD;AACA,4C;AACA,iC;AACA,oJ;AACA,kB;AACA,sE;AACA,wD;AACA,2B;AACA,c;;AAEA,0C;AACA,+C;AACA,8J;AACA,c;;AAEA,8D;AACA,wC;AACA,+C;AACA,wF;AACA,qC;AACA,8O;AACA,sB;AACA,2J;AACA,6J;AACA,2D;AACA,iB;AACA,mD;AACA,a;AACA,U;;;AAGA,+B;AACA,qD;AACA,2D;AACA,6D;AACA,kE;AACA,4D;AACA,gF;AACA,kC;AACA,gC;AACA,uC;AACA,sC;AACA,mC;;AAEA,+C;AACA,qC;AACA,mE;AACA,yB;AACA,+E;AACA,wB;AACA,8E;AACA,iB;AACA,a;;AAEA,qC;AACA,+E;AACA,6E;AACA,8E;AACA,+E;AACA,yE;AACA,a;;AAEA,qC;AACA,sC;AACA,yC;AACA,6B;AACA,+B;AACA,mC;AACA,+B;AACA,+B;AACA,c;;AAEA,8B;AACA,+B;;AAEA,8B;;AAEA,W;;AAEA,M;AACA,W","sourcesContent":["// jQuery Gantt Chart\n// ==================\n\n// Basic usage:\n\n//      $(\".selector\").gantt({\n//          source: \"ajax/data.json\",\n//          scale: \"weeks\",\n//          minScale: \"weeks\",\n//          maxScale: \"months\",\n//          onItemClick: function(data) {\n//              alert(\"Item clicked - show some details\");\n//          },\n//          onAddClick: function(dt, rowId) {\n//              alert(\"Empty space clicked - add an item!\");\n//          },\n//          onRender: function() {\n//              console.log(\"chart rendered\");\n//          }\n//      });\n\n//\n/*jshint shadow:true, laxbreak:true, jquery:true, strict:true, trailing:true */\n(function ($, undefined) {\n\n    \"use strict\";\n\n    $.fn.gantt = function (options) {\n\n        var cookieKey = \"jquery.fn.gantt\";\n        var scales = [\"hours\", \"days\", \"weeks\", \"months\"];\n        //Default settings\n        var settings = {\n            source: [],\n            itemsPerPage: 7,\n            months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n            dow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n            navigate: \"buttons\",\n            scale: \"days\",\n            useCookie: false,\n            maxScale: \"months\",\n            minScale: \"hours\",\n            waitText: \"Please wait...\",\n            onItemClick: function (data) { return; },\n            onAddClick: function (data) { return; },\n            onRender: function() { return; },\n            scrollToToday: true\n        };\n\n        /**\n        * Extend options with default values\n        */\n        if (options) {\n            $.extend(settings, options);\n        }\n\n        // can't use cookie if don't have `$.cookie`\n        settings.useCookie = settings.useCookie && $.isFunction($.cookie);\n\n        // custom selector `:findday` used to match on specified day in ms.\n        //\n        // The selector is passed a date in ms and elements are added to the\n        // selection filter if the element date matches, as determined by the\n        // id attribute containing a parsable date in ms.\n        $.extend($.expr[\":\"], {\n            findday: function (a, i, m) {\n                var cd = new Date(parseInt(m[3], 10));\n                var id = $(a).attr(\"id\");\n                id = id ? id : \"\";\n                var si = id.indexOf(\"-\") + 1;\n                var ed = new Date(parseInt(id.substring(si, id.length), 10));\n                cd = new Date(cd.getFullYear(), cd.getMonth(), cd.getDate());\n                ed = new Date(ed.getFullYear(), ed.getMonth(), ed.getDate());\n                return cd.getTime() === ed.getTime();\n            }\n        });\n        // custom selector `:findweek` used to match on specified week in ms.\n        $.extend($.expr[\":\"], {\n            findweek: function (a, i, m) {\n                var cd = new Date(parseInt(m[3], 10));\n                var id = $(a).attr(\"id\");\n                id = id ? id : \"\";\n                var si = id.indexOf(\"-\") + 1;\n                cd = cd.getFullYear() + \"-\" + cd.getDayForWeek().getWeekOfYear();\n                var ed = id.substring(si, id.length);\n                return cd === ed;\n            }\n        });\n        // custom selector `:findmonth` used to match on specified month in ms.\n        $.extend($.expr[\":\"], {\n            findmonth: function (a, i, m) {\n                var cd = new Date(parseInt(m[3], 10));\n                cd = cd.getFullYear() + \"-\" + cd.getMonth();\n                var id = $(a).attr(\"id\");\n                id = id ? id : \"\";\n                var si = id.indexOf(\"-\") + 1;\n                var ed = id.substring(si, id.length);\n                return cd === ed;\n            }\n        });\n\n        // Date prototype helpers\n        // ======================\n\n        // `getWeekId` returns a string in the form of 'dh-YYYY-WW', where WW is\n        // the week # for the year.\n        // It is used to add an id to the week divs\n        Date.prototype.getWeekId = function () {\n            var y = this.getFullYear();\n            var w = this.getDayForWeek().getWeekOfYear();\n            var m = this.getMonth();\n            if (m === 11 && w === 1) {\n                y++;\n            }\n            return 'dh-' + y + \"-\" + w;\n        };\n\n        // `getRepDate` returns the seconds since the epoch for a given date\n        // depending on the active scale\n        Date.prototype.getRepDate = function () {\n            switch (settings.scale) {\n                case \"hours\":\n                    return this.getTime();\n                case \"weeks\":\n                    return this.getDayForWeek().getTime();\n                case \"months\":\n                    return new Date(this.getFullYear(), this.getMonth(), 1).getTime();\n                default:\n                    return this.getTime();\n            }\n        };\n\n        // `getDayOfYear` returns the day number for the year\n        Date.prototype.getDayOfYear = function () {\n            var fd = new Date(this.getFullYear(), 0, 0);\n            var sd = new Date(this.getFullYear(), this.getMonth(), this.getDate());\n            return Math.ceil((sd - fd) / 86400000);\n        };\n\n        // `getWeekOfYear` returns the week number for the year\n        Date.prototype.getWeekOfYear = function () {\n            var ys = new Date(this.getFullYear(), 0, 1);\n            var sd = new Date(this.getFullYear(), this.getMonth(), this.getDate());\n            if (ys.getDay() > 3) {\n                ys = new Date(sd.getFullYear(), 0, (7 - ys.getDay()));\n            }\n            var daysCount = sd.getDayOfYear() - ys.getDayOfYear();\n            return Math.ceil(daysCount / 7);\n\n        };\n\n        // `getDaysInMonth` returns the number of days in a month\n        Date.prototype.getDaysInMonth = function () {\n            return 32 - new Date(this.getFullYear(), this.getMonth(), 32).getDate();\n        };\n\n        // `hasWeek` returns `true` if the date resides on a week boundary\n        // **????????????????? Don't know if this is true**\n        Date.prototype.hasWeek = function () {\n            var df = new Date(this.valueOf());\n            df.setDate(df.getDate() - df.getDay());\n            var dt = new Date(this.valueOf());\n            dt.setDate(dt.getDate() + (6 - dt.getDay()));\n\n            if (df.getMonth() === dt.getMonth()) {\n                return true;\n            } else {\n                return (df.getMonth() === this.getMonth() && dt.getDate() < 4) || (df.getMonth() !== this.getMonth() && dt.getDate() >= 4);\n            }\n        };\n\n        // `getDayForWeek` returns the Date object for the starting date of\n        // the week # for the year\n        Date.prototype.getDayForWeek = function () {\n            var df = new Date(this.valueOf());\n            df.setDate(df.getDate() - df.getDay());\n            var dt = new Date(this.valueOf());\n            dt.setDate(dt.getDate() + (6 - dt.getDay()));\n            if ((df.getMonth() === dt.getMonth()) || (df.getMonth() !== dt.getMonth() && dt.getDate() >= 4)) {\n                return new Date(dt.setDate(dt.getDate() - 3));\n            } else {\n                return new Date(df.setDate(df.getDate() + 3));\n            }\n        };\n\n        // fixes https://github.com/taitems/jQuery.Gantt/issues/62\n        function ktkGetNextDate(currentDate, scaleStep) {\n            for(var minIncrements = 1;; minIncrements++) {\n                var nextDate = new Date(currentDate);\n                nextDate.setHours(currentDate.getHours() + scaleStep * minIncrements);\n\n                if (nextDate.getTime() !== currentDate.getTime()) {\n                    return nextDate;\n                }\n\n                // If code reaches here, it's because current didn't really increment (invalid local time) because of daylight-saving adjustments\n                // => retry adding 2, 3, 4 hours, and so on (until nextDate > current)\n            }\n        }\n\n        // Grid management\n        // ===============\n\n        // Core object is responsible for navigation and rendering\n        var core = {\n            // Return the element whose topmost point lies under the given point\n            // Normalizes for old browsers\n            elementFromPoint: (function(){ // IIFE\n                // version for normal browsers\n                if (document.compatMode === \"CSS1Compat\") {\n                    return function (x, y) {\n                        x -= window.pageXOffset;\n                        y -= window.pageYOffset;\n                        return document.elementFromPoint(x, y);\n                    };\n                }\n                // version for older browsers\n                return function (x, y) {\n                    x -= $(document).scrollLeft();\n                    y -= $(document).scrollTop();\n                    return document.elementFromPoint(x, y);\n                };\n            })(),\n\n            // **Create the chart**\n            create: function (element) {\n\n                // Initialize data with a json object or fetch via an xhr\n                // request depending on `settings.source`\n                if (typeof settings.source !== \"string\") {\n                    element.data = settings.source;\n                    core.init(element);\n                } else {\n                    $.getJSON(settings.source, function (jsData) {\n                        element.data = jsData;\n                        core.init(element);\n                    });\n                }\n            },\n\n            // **Setup the initial view**\n            // Here we calculate the number of rows, pages and visible start\n            // and end dates once the data is ready\n            init: function (element) {\n                element.rowsNum = element.data.length;\n                element.pageCount = Math.ceil(element.rowsNum / settings.itemsPerPage);\n                element.rowsOnLastPage = element.rowsNum - (Math.floor(element.rowsNum / settings.itemsPerPage) * settings.itemsPerPage);\n\n                element.dateStart = tools.getMinDate(element);\n                element.dateEnd = tools.getMaxDate(element);\n\n\n                /* core.render(element); */\n                core.waitToggle(element, true, function () { core.render(element); });\n            },\n\n            // **Render the grid**\n            render: function (element) {\n                var content = $('<div class=\"fn-content\"/>');\n                var $leftPanel = core.leftPanel(element);\n                content.append($leftPanel);\n                var $rightPanel = core.rightPanel(element, $leftPanel);\n                var mLeft, hPos;\n\n                content.append($rightPanel);\n                content.append(core.navigation(element));\n\n                var $dataPanel = $rightPanel.find(\".dataPanel\");\n\n                element.gantt = $('<div class=\"fn-gantt\" />').append(content);\n\n                $(element).empty().append(element.gantt);\n\n                element.scrollNavigation.panelMargin = parseInt($dataPanel.css(\"margin-left\").replace(\"px\", \"\"), 10);\n                element.scrollNavigation.panelMaxPos = ($dataPanel.width() - $rightPanel.width());\n\n                element.scrollNavigation.canScroll = ($dataPanel.width() > $rightPanel.width());\n\n                core.markNow(element);\n                core.fillData(element, $dataPanel, $leftPanel);\n\n                // Set a cookie to record current position in the view\n                if (settings.useCookie) {\n                    var sc = $.cookie(this.cookieKey + \"ScrollPos\");\n                    if (sc) {\n                        element.hPosition = sc;\n                    }\n                }\n\n                // Scroll the grid to today's date\n                if (settings.scrollToToday) {\n                    core.navigateTo(element, 'now');\n                    core.scrollPanel(element, 0);\n                // or, scroll the grid to the left most date in the panel\n                } else {\n                    if ((element.hPosition !== 0)) {\n                        if (element.scaleOldWidth) {\n                            mLeft = ($dataPanel.width() - $rightPanel.width());\n                            hPos = mLeft * element.hPosition / element.scaleOldWidth;\n                            hPos = hPos > 0 ? 0 : hPos;\n                            $dataPanel.css({ \"margin-left\": hPos + \"px\" });\n                            element.scrollNavigation.panelMargin = hPos;\n                            element.hPosition = hPos;\n                            element.scaleOldWidth = null;\n                        } else {\n                            $dataPanel.css({ \"margin-left\": element.hPosition + \"px\" });\n                            element.scrollNavigation.panelMargin = element.hPosition;\n                        }\n                        core.repositionLabel(element);\n                    } else {\n                        core.repositionLabel(element);\n                    }\n                }\n\n                $dataPanel.css({ height: $leftPanel.height() });\n                core.waitToggle(element, false);\n                settings.onRender();\n            },\n\n            // Create and return the left panel with labels\n            leftPanel: function (element) {\n                /* Left panel */\n                var ganttLeftPanel = $('<div class=\"leftPanel\"/>')\n                    .append($('<div class=\"row spacer\"/>')\n                    .css(\"height\", tools.getCellSize() * element.headerRows + \"px\")\n                    .css(\"width\", \"100%\"));\n\n                var entries = [];\n                $.each(element.data, function (i, entry) {\n                    if (i >= element.pageNum * settings.itemsPerPage && i < (element.pageNum * settings.itemsPerPage + settings.itemsPerPage)) {\n                        entries.push('<div class=\"row name row' + i + (entry.desc ? '' : ' fn-wide') + '\" id=\"rowheader' + i + '\" offset=\"' + i % settings.itemsPerPage * tools.getCellSize() + '\">');\n                        entries.push('<span class=\"fn-label' + (entry.cssClass ? ' ' + entry.cssClass : '') + '\">' + entry.name + '</span>');\n                        entries.push('</div>');\n\n                        if (entry.desc) {\n                            entries.push('<div class=\"row desc row' + i + ' \" id=\"RowdId_' + i + '\" data-id=\"' + entry.id + '\">');\n                            entries.push('<span class=\"fn-label' + (entry.cssClass ? ' ' + entry.cssClass : '') + '\">' + entry.desc + '</span>');\n                            entries.push('</div>');\n                        }\n\n                    }\n                });\n                ganttLeftPanel.append(entries.join(\"\"));\n                return ganttLeftPanel;\n            },\n\n            // Create and return the data panel element\n            dataPanel: function (element, width) {\n                var dataPanel = $('<div class=\"dataPanel\" style=\"width: ' + width + 'px;\"/>');\n\n                // Handle mousewheel events for scrolling the data panel\n                var wheel = 'onwheel' in element ? 'wheel' : document.onmousewheel !== undefined ? 'mousewheel' : 'DOMMouseScroll';\n                $(element).on(wheel, function (e) { core.wheelScroll(element, e); });\n\n                // Handle click events and dispatch to registered `onAddClick`\n                // function\n                dataPanel.click(function (e) {\n\n                    e.stopPropagation();\n                    var corrX/* <- never used? */, corrY;\n                    var leftpanel = $(element).find(\".fn-gantt .leftPanel\");\n                    var datapanel = $(element).find(\".fn-gantt .dataPanel\");\n                    switch (settings.scale) {\n                        case \"weeks\":\n                            corrY = tools.getCellSize() * 2;\n                            break;\n                        case \"months\":\n                            corrY = tools.getCellSize();\n                            break;\n                        case \"hours\":\n                            corrY = tools.getCellSize() * 4;\n                            break;\n                        case \"days\":\n                            corrY = tools.getCellSize() * 3;\n                            break;\n                        default:\n                            corrY = tools.getCellSize() * 2;\n                            break;\n                    }\n\n                    /* Adjust, so get middle of elm\n                    corrY -= Math.floor(tools.getCellSize() / 2);\n                    */\n\n                    // Find column where click occurred\n                    var col = core.elementFromPoint(e.pageX, datapanel.offset().top + corrY);\n                    // Was the label clicked directly?\n                    if (col.className === \"fn-label\") {\n                        col = $(col.parentNode);\n                    } else {\n                        col = $(col);\n                    }\n\n                    var dt = col.attr(\"repdate\");\n                    // Find row where click occurred\n                    var row = core.elementFromPoint(leftpanel.offset().left + leftpanel.width() - 10, e.pageY);\n                    // Was the lable clicked directly?\n                    if (row.className.indexOf(\"fn-label\") === 0) {\n                        row = $(row.parentNode);\n                    } else {\n                        row = $(row);\n                    }\n                    var rowId = row.data().id;\n\n                    // Dispatch user registered function with the DateTime in ms\n                    // and the id if the clicked object is a row\n                    settings.onAddClick(dt, rowId);\n                });\n                return dataPanel;\n            },\n\n            // Creates and return the right panel containing the year/week/day\n            // header\n            rightPanel: function (element, leftPanel /* <- never used? */) {\n\n                var range = null;\n                // Days of the week have a class of one of\n                // `sn` (Sunday), `sa` (Saturday), or `wd` (Weekday)\n                var dowClass = [\"sn\", \"wd\", \"wd\", \"wd\", \"wd\", \"wd\", \"sa\"];\n                //TODO: was someone planning to allow styles to stretch to the bottom of the chart?\n                //var gridDowClass = [\" sn\", \"\", \"\", \"\", \"\", \"\", \" sa\"];\n\n                var yearArr = ['<div class=\"row\"/>'];\n                var daysInYear = 0;\n\n                var monthArr = ['<div class=\"row\"/>'];\n                var daysInMonth = 0;\n\n                var dayArr = [];\n\n                var hoursInDay = 0;\n\n                var dowArr = [];\n\n                var horArr = [];\n\n\n                var today = new Date();\n                today = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n\n                // Setup the headings based on the chosen `settings.scale`\n                switch (settings.scale) {\n                    // **Hours**\n                    case \"hours\":\n\n                        range = tools.parseTimeRange(element.dateStart, element.dateEnd, element.scaleStep);\n\n                        var year = range[0].getFullYear();\n                        var month = range[0].getMonth();\n                        var day = range[0];\n\n                        for (var i = 0, len = range.length; i < len; i++) {\n                            var rday = range[i];\n\n                            // Fill years\n                            var rfy = rday.getFullYear();\n                            if (rfy !== year) {\n                                yearArr.push(\n                                    ('<div class=\"row header year\" style=\"width: '\n                                        + tools.getCellSize() * daysInYear\n                                        + 'px;\"><div class=\"fn-label\">'\n                                        + year\n                                        + '</div></div>'));\n\n                                year = rfy;\n                                daysInYear = 0;\n                            }\n                            daysInYear++;\n\n\n                            // Fill months\n                            var rm = rday.getMonth();\n                            if (rm !== month) {\n                                monthArr.push(\n                                    ('<div class=\"row header month\" style=\"width: '\n                                    + tools.getCellSize() * daysInMonth + 'px\"><div class=\"fn-label\">'\n                                    + settings.months[month]\n                                    + '</div></div>'));\n\n                                month = rm;\n                                daysInMonth = 0;\n                            }\n                            daysInMonth++;\n\n\n                            // Fill days & hours\n\n                            var rgetDay = rday.getDay();\n                            var getDay = day.getDay();\n                            var day_class = dowClass[rgetDay];\n                            if (tools.isHoliday(rday)) {\n                                day_class = \"holiday\";\n                            }\n                            if (rgetDay !== getDay) {\n                                var day_class2 = (today - day === 0) ? \"today\" : tools.isHoliday( day.getTime() ) ? \"holiday\" : dowClass[getDay];\n\n                                dayArr.push('<div class=\"row date ' + day_class2 + '\" '\n                                        + ' style=\"width: ' + tools.getCellSize() * hoursInDay + 'px;\"> '\n                                        + ' <div class=\"fn-label\">' + day.getDate() + '</div></div>');\n                                dowArr.push('<div class=\"row day ' + day_class2 + '\" '\n                                        + ' style=\"width: ' + tools.getCellSize() * hoursInDay + 'px;\"> '\n                                        + ' <div class=\"fn-label\">' + settings.dow[getDay] + '</div></div>');\n\n                                day = rday;\n                                hoursInDay = 0;\n                            }\n                            hoursInDay++;\n\n                            horArr.push('<div class=\"row day '\n                                    + day_class\n                                    + '\" id=\"dh-'\n                                    + rday.getTime()\n                                    + '\"  offset=\"' + i * tools.getCellSize() + '\" repdate=\"' + rday.getRepDate() + '\"><div class=\"fn-label\">'\n                                    + rday.getHours()\n                                    + '</div></div>');\n                        }\n\n\n                        // Last year\n                        yearArr.push(\n                            '<div class=\"row header year\" style=\"width: '\n                            + tools.getCellSize() * daysInYear + 'px;\"><div class=\"fn-label\">'\n                            + year\n                            + '</div></div>');\n\n                        // Last month\n                        monthArr.push(\n                            '<div class=\"row header month\" style=\"width: '\n                            + tools.getCellSize() * daysInMonth + 'px\"><div class=\"fn-label\">'\n                            + settings.months[month]\n                            + '</div></div>');\n\n                        var day_class = dowClass[day.getDay()];\n\n                        if ( tools.isHoliday(day) ) {\n                            day_class = \"holiday\";\n                        }\n\n                        dayArr.push('<div class=\"row date ' + day_class + '\" '\n                                + ' style=\"width: ' + tools.getCellSize() * hoursInDay + 'px;\"> '\n                                + ' <div class=\"fn-label\">' + day.getDate() + '</div></div>');\n\n                        dowArr.push('<div class=\"row day ' + day_class + '\" '\n                                + ' style=\"width: ' + tools.getCellSize() * hoursInDay + 'px;\"> '\n                                + ' <div class=\"fn-label\">' + settings.dow[day.getDay()] + '</div></div>');\n\n                        var dataPanel = core.dataPanel(element, range.length * tools.getCellSize());\n\n\n                        // Append panel elements\n                        dataPanel.append(yearArr.join(\"\"));\n                        dataPanel.append(monthArr.join(\"\"));\n                        dataPanel.append($('<div class=\"row\"/>').html(dayArr.join(\"\")));\n                        dataPanel.append($('<div class=\"row\"/>').html(dowArr.join(\"\")));\n                        dataPanel.append($('<div class=\"row\"/>').html(horArr.join(\"\")));\n\n                        break;\n\n                    // **Weeks**\n                    case \"weeks\":\n                        range = tools.parseWeeksRange(element.dateStart, element.dateEnd);\n                        yearArr = ['<div class=\"row\"/>'];\n                        monthArr = ['<div class=\"row\"/>'];\n                        var year = range[0].getFullYear();\n                        var month = range[0].getMonth();\n                        var day = range[0];\n\n                        for (var i = 0, len = range.length; i < len; i++) {\n                            var rday = range[i];\n\n                            // Fill years\n                            if (rday.getFullYear() !== year) {\n                                yearArr.push(\n                                    ('<div class=\"row header year\" style=\"width: '\n                                        + tools.getCellSize() * daysInYear\n                                        + 'px;\"><div class=\"fn-label\">'\n                                        + year\n                                        + '</div></div>'));\n                                year = rday.getFullYear();\n                                daysInYear = 0;\n                            }\n                            daysInYear++;\n\n                            // Fill months\n                            if (rday.getMonth() !== month) {\n                                monthArr.push(\n                                    ('<div class=\"row header month\" style=\"width:'\n                                       + tools.getCellSize() * daysInMonth\n                                       + 'px;\"><div class=\"fn-label\">'\n                                       + settings.months[month]\n                                       + '</div></div>'));\n                                month = rday.getMonth();\n                                daysInMonth = 0;\n                            }\n                            daysInMonth++;\n\n                            // Fill weeks\n                            dayArr.push('<div class=\"row day wd\" '\n                                    + ' id=\"' + rday.getWeekId() + '\" offset=\"' + i * tools.getCellSize() + '\" repdate=\"' + rday.getRepDate() + '\"> '\n                                    + ' <div class=\"fn-label\">' + rday.getWeekOfYear() + '</div></div>');\n                        }\n\n\n                        // Last year\n                        yearArr.push(\n                            '<div class=\"row header year\" style=\"width: '\n                            + tools.getCellSize() * daysInYear + 'px;\"><div class=\"fn-label\">'\n                            + year\n                            + '</div></div>');\n\n                        // Last month\n                        monthArr.push(\n                            '<div class=\"row header month\" style=\"width: '\n                            + tools.getCellSize() * daysInMonth + 'px\"><div class=\"fn-label\">'\n                            + settings.months[month]\n                            + '</div></div>');\n\n                        var dataPanel = core.dataPanel(element, range.length * tools.getCellSize());\n\n                        dataPanel.append(yearArr.join(\"\") + monthArr.join(\"\") + dayArr.join(\"\") + (dowArr.join(\"\")));\n\n                        break;\n\n                    // **Months**\n                    case 'months':\n                        range = tools.parseMonthsRange(element.dateStart, element.dateEnd);\n\n                        var year = range[0].getFullYear();\n                        var month = range[0].getMonth();\n                        var day = range[0];\n\n                        for (var i = 0, len = range.length; i < len; i++) {\n                            var rday = range[i];\n\n                            // Fill years\n                            if (rday.getFullYear() !== year) {\n                                yearArr.push(\n                                    ('<div class=\"row header year\" style=\"width: '\n                                        + tools.getCellSize() * daysInYear\n                                        + 'px;\"><div class=\"fn-label\">'\n                                        + year\n                                        + '</div></div>'));\n                                year = rday.getFullYear();\n                                daysInYear = 0;\n                            }\n                            daysInYear++;\n                            monthArr.push('<div class=\"row day wd\" id=\"dh-' + tools.genId(rday.getTime()) + '\" offset=\"' + i * tools.getCellSize() + '\" repdate=\"' + rday.getRepDate() + '\">' + (1 + rday.getMonth()) + '</div>');\n                        }\n\n\n                        // Last year\n                        yearArr.push(\n                            '<div class=\"row header year\" style=\"width: '\n                            + tools.getCellSize() * daysInYear + 'px;\"><div class=\"fn-label\">'\n                            + year\n                            + '</div></div>');\n\n                        // Last month\n                        monthArr.push(\n                            '<div class=\"row header month\" style=\"width: '\n                            + tools.getCellSize() * daysInMonth + 'px\"><div class=\"fn-label\">'\n                            + settings.months[month]\n                            + '</div></div>');\n\n                        var dataPanel = core.dataPanel(element, range.length * tools.getCellSize());\n\n                        // Append panel elements\n                        dataPanel.append(yearArr.join(\"\"));\n                        dataPanel.append(monthArr.join(\"\"));\n                        dataPanel.append($('<div class=\"row\"/>').html(dayArr.join(\"\")));\n                        dataPanel.append($('<div class=\"row\"/>').html(dowArr.join(\"\")));\n\n                        break;\n\n                    // **Days (default)**\n                    default:\n                        range = tools.parseDateRange(element.dateStart, element.dateEnd);\n\n                        var dateBefore = ktkGetNextDate(range[0], -1);\n                        var year = dateBefore.getFullYear();\n                        var month = dateBefore.getMonth();\n                        var day = dateBefore; // <- never used?\n\n                        for (var i = 0, len = range.length; i < len; i++) {\n                            var rday = range[i];\n\n                            // Fill years\n                            if (rday.getFullYear() !== year) {\n                                yearArr.push(\n                                    ('<div class=\"row header year\" style=\"width:'\n                                        + tools.getCellSize() * daysInYear\n                                        + 'px;\"><div class=\"fn-label\">'\n                                        + year\n                                        + '</div></div>'));\n                                year = rday.getFullYear();\n                                daysInYear = 0;\n                            }\n                            daysInYear++;\n\n                            // Fill months\n                            if (rday.getMonth() !== month) {\n                                monthArr.push(\n                                    ('<div class=\"row header month\" style=\"width:'\n                                       + tools.getCellSize() * daysInMonth\n                                       + 'px;\"><div class=\"fn-label\">'\n                                       + settings.months[month]\n                                       + '</div></div>'));\n                                month = rday.getMonth();\n                                daysInMonth = 0;\n                            }\n                            daysInMonth++;\n\n                            var getDay = rday.getDay();\n                            var day_class = dowClass[getDay];\n                            if ( tools.isHoliday(rday) ) {\n                                day_class = \"holiday\";\n                            }\n\n                            dayArr.push('<div class=\"row date ' + day_class + '\" '\n                                    + ' id=\"dh-' + tools.genId(rday.getTime()) + '\" offset=\"' + i * tools.getCellSize() + '\" repdate=\"' + rday.getRepDate() + '\"> '\n                                    + ' <div class=\"fn-label\">' + rday.getDate() + '</div></div>');\n                            dowArr.push('<div class=\"row day ' + day_class + '\" '\n                                    + ' id=\"dw-' + tools.genId(rday.getTime()) + '\"  repdate=\"' + rday.getRepDate() + '\"> '\n                                    + ' <div class=\"fn-label\">' + settings.dow[getDay] + '</div></div>');\n                        } //for\n\n                        // Last year\n                        yearArr.push(\n                            '<div class=\"row header year\" style=\"width: '\n                            + tools.getCellSize() * daysInYear + 'px;\"><div class=\"fn-label\">'\n                            + year\n                            + '</div></div>');\n\n                        // Last month\n                        monthArr.push(\n                            '<div class=\"row header month\" style=\"width: '\n                            + tools.getCellSize() * daysInMonth + 'px\"><div class=\"fn-label\">'\n                            + settings.months[month]\n                            + '</div></div>');\n\n                        var dataPanel = core.dataPanel(element, range.length * tools.getCellSize());\n\n\n                        // Append panel elements\n\n                        dataPanel.append(yearArr.join(\"\"));\n                        dataPanel.append(monthArr.join(\"\"));\n                        dataPanel.append($('<div class=\"row\" style=\"margin-left: 0;\" />').html(dayArr.join(\"\")));\n                        dataPanel.append($('<div class=\"row\" style=\"margin-left: 0;\" />').html(dowArr.join(\"\")));\n\n                        break;\n                }\n\n                return $('<div class=\"rightPanel\"></div>').append(dataPanel);\n            },\n\n            // **Navigation**\n            navigation: function (element) {\n                var ganttNavigate = null;\n                // Scrolling navigation is provided by setting\n                // `settings.navigate='scroll'`\n                if (settings.navigate === \"scroll\") {\n                    ganttNavigate = $('<div class=\"navigate\" />')\n                        .append($('<div class=\"nav-slider\" />')\n                            .append($('<div class=\"nav-slider-left\" />')\n                                .append($('<button type=\"button\" class=\"nav-link nav-page-back\"/>')\n                                    .html('&lt;')\n                                    .click(function () {\n                                        core.navigatePage(element, -1);\n                                    }))\n                                .append($('<div class=\"page-number\"/>')\n                                        .append($('<span/>')\n                                            .html(element.pageNum + 1 + ' of ' + element.pageCount)))\n                                .append($('<button type=\"button\" class=\"nav-link nav-page-next\"/>')\n                                    .html('&gt;')\n                                    .click(function () {\n                                        core.navigatePage(element, 1);\n                                    }))\n                                .append($('<button type=\"button\" class=\"nav-link nav-now\"/>')\n                                    .html('&#9679;')\n                                    .click(function () {\n                                        core.navigateTo(element, 'now');\n                                    }))\n                                .append($('<button type=\"button\" class=\"nav-link nav-prev-week\"/>')\n                                    .html('&lt;&lt;')\n                                    .click(function () {\n                                        if (settings.scale === 'hours') {\n                                            core.navigateTo(element, tools.getCellSize() * 8);\n                                        } else if (settings.scale === 'days') {\n                                            core.navigateTo(element, tools.getCellSize() * 30);\n                                        } else if (settings.scale === 'weeks') {\n                                            core.navigateTo(element, tools.getCellSize() * 12);\n                                        } else if (settings.scale === 'months') {\n                                            core.navigateTo(element, tools.getCellSize() * 6);\n                                        }\n                                    }))\n                                .append($('<button type=\"button\" class=\"nav-link nav-prev-day\"/>')\n                                    .html('&lt;')\n                                    .click(function () {\n                                        if (settings.scale === 'hours') {\n                                            core.navigateTo(element, tools.getCellSize() * 4);\n                                        } else if (settings.scale === 'days') {\n                                            core.navigateTo(element, tools.getCellSize() * 7);\n                                        } else if (settings.scale === 'weeks') {\n                                            core.navigateTo(element, tools.getCellSize() * 4);\n                                        } else if (settings.scale === 'months') {\n                                            core.navigateTo(element, tools.getCellSize() * 3);\n                                        }\n                                    })))\n                            .append($('<div class=\"nav-slider-content\" />')\n                                    .append($('<div class=\"nav-slider-bar\" />')\n                                            .append($('<a class=\"nav-slider-button\" />')\n                                                )\n                                                .mousedown(function (e) {\n                                                    e.preventDefault();\n                                                    element.scrollNavigation.scrollerMouseDown = true;\n                                                    core.sliderScroll(element, e);\n                                                })\n                                                .mousemove(function (e) {\n                                                    if (element.scrollNavigation.scrollerMouseDown) {\n                                                        core.sliderScroll(element, e);\n                                                    }\n                                                })\n                                            )\n                                        )\n                            .append($('<div class=\"nav-slider-right\" />')\n                                .append($('<button type=\"button\" class=\"nav-link nav-next-day\"/>')\n                                    .html('&gt;')\n                                    .click(function () {\n                                        if (settings.scale === 'hours') {\n                                            core.navigateTo(element, tools.getCellSize() * -4);\n                                        } else if (settings.scale === 'days') {\n                                            core.navigateTo(element, tools.getCellSize() * -7);\n                                        } else if (settings.scale === 'weeks') {\n                                            core.navigateTo(element, tools.getCellSize() * -4);\n                                        } else if (settings.scale === 'months') {\n                                            core.navigateTo(element, tools.getCellSize() * -3);\n                                        }\n                                    }))\n                            .append($('<button type=\"button\" class=\"nav-link nav-next-week\"/>')\n                                    .html('&gt;&gt;')\n                                    .click(function () {\n                                        if (settings.scale === 'hours') {\n                                            core.navigateTo(element, tools.getCellSize() * -8);\n                                        } else if (settings.scale === 'days') {\n                                            core.navigateTo(element, tools.getCellSize() * -30);\n                                        } else if (settings.scale === 'weeks') {\n                                            core.navigateTo(element, tools.getCellSize() * -12);\n                                        } else if (settings.scale === 'months') {\n                                            core.navigateTo(element, tools.getCellSize() * -6);\n                                        }\n                                    }))\n                                .append($('<button type=\"button\" class=\"nav-link nav-zoomIn\"/>')\n                                    .html('&#43;')\n                                    .click(function () {\n                                        core.zoomInOut(element, -1);\n                                    }))\n                                .append($('<button type=\"button\" class=\"nav-link nav-zoomOut\"/>')\n                                    .html('&#45;')\n                                    .click(function () {\n                                        core.zoomInOut(element, 1);\n                                    }))\n                                    )\n                                );\n                    $(document).mouseup(function () {\n                        element.scrollNavigation.scrollerMouseDown = false;\n                    });\n                // Button navigation is provided by setting `settings.navigation='buttons'`\n                } else {\n                    ganttNavigate = $('<div class=\"navigate\" />')\n                        .append($('<button type=\"button\" class=\"nav-link nav-page-back\"/>')\n                            .html('&lt;')\n                            .click(function () {\n                                core.navigatePage(element, -1);\n                            }))\n                        .append($('<div class=\"page-number\"/>')\n                                .append($('<span/>')\n                                    .html(element.pageNum + 1 + ' of ' + element.pageCount)))\n                        .append($('<button type=\"button\" class=\"nav-link nav-page-next\"/>')\n                            .html('&gt;')\n                            .click(function () {\n                                core.navigatePage(element, 1);\n                            }))\n                        .append($('<button type=\"button\" class=\"nav-link nav-begin\"/>')\n                            .html('&#124;&lt;')\n                            .click(function () {\n                                core.navigateTo(element, 'begin');\n                            }))\n                        .append($('<button type=\"button\" class=\"nav-link nav-prev-week\"/>')\n                            .html('&lt;&lt;')\n                            .click(function () {\n                                core.navigateTo(element, tools.getCellSize() * 7);\n                            }))\n                        .append($('<button type=\"button\" class=\"nav-link nav-prev-day\"/>')\n                            .html('&lt;')\n                            .click(function () {\n                                core.navigateTo(element, tools.getCellSize());\n                            }))\n                        .append($('<button type=\"button\" class=\"nav-link nav-now\"/>')\n                            .html('&#9679;')\n                            .click(function () {\n                                core.navigateTo(element, 'now');\n                            }))\n                        .append($('<button type=\"button\" class=\"nav-link nav-next-day\"/>')\n                            .html('&gt;')\n                            .click(function () {\n                                core.navigateTo(element, tools.getCellSize() * -1);\n                            }))\n                        .append($('<button type=\"button\" class=\"nav-link nav-next-week\"/>')\n                            .html('&gt;&gt;')\n                            .click(function () {\n                                core.navigateTo(element, tools.getCellSize() * -7);\n                            }))\n                        .append($('<button type=\"button\" class=\"nav-link nav-end\"/>')\n                            .html('&gt;&#124;')\n                            .click(function () {\n                                core.navigateTo(element, 'end');\n                            }))\n                        .append($('<button type=\"button\" class=\"nav-link nav-zoomIn\"/>')\n                            .html('&#43;')\n                            .click(function () {\n                                core.zoomInOut(element, -1);\n                            }))\n                        .append($('<button type=\"button\" class=\"nav-link nav-zoomOut\"/>')\n                            .html('&#45;')\n                            .click(function () {\n                                core.zoomInOut(element, 1);\n                            }));\n                }\n                return $('<div class=\"bottom\"/>').append(ganttNavigate);\n            },\n\n            // **Progress Bar**\n            // Return an element representing a progress of position within\n            // the entire chart\n            createProgressBar: function (days, cls, desc, label, dataObj) {\n                var cellWidth = tools.getCellSize();\n                var barMarg = tools.getProgressBarMargin() || 0;\n                var bar = $('<div class=\"bar\"><div class=\"fn-label\">' + label + '</div></div>')\n                        .addClass(cls)\n                        .css({\n                            width: ((cellWidth * days) - barMarg) + 2\n                        })\n                        .data(\"dataObj\", dataObj);\n\n                if (desc) {\n                    bar\n                      .mouseover(function (e) {\n                          var hint = $('<div class=\"fn-gantt-hint\" />').html(desc);\n                          $(\"body\").append(hint);\n                          hint.css(\"left\", e.pageX);\n                          hint.css(\"top\", e.pageY);\n                          hint.show();\n                      })\n                      .mouseout(function () {\n                          $(\".fn-gantt-hint\").remove();\n                      })\n                      .mousemove(function (e) {\n                          $(\".fn-gantt-hint\").css(\"left\", e.pageX);\n                          $(\".fn-gantt-hint\").css(\"top\", e.pageY + 15);\n                      });\n                }\n                bar.click(function (e) {\n                    e.stopPropagation();\n                    settings.onItemClick($(this).data(\"dataObj\"));\n                });\n                return bar;\n            },\n\n            // Remove the `wd` (weekday) class and add `today` class to the\n            // current day/week/month (depending on the current scale)\n            markNow: function (element) {\n                switch (settings.scale) {\n                    case \"weeks\":\n                        var cd = Date.parse(new Date());\n                        cd = (Math.floor(cd / 36400000) * 36400000);\n                        $(element).find(':findweek(\"' + cd + '\")').removeClass('wd').addClass('today');\n                        break;\n                    case \"months\":\n                        $(element).find(':findmonth(\"' + new Date().getTime() + '\")').removeClass('wd').addClass('today');\n                        break;\n                    default:\n                        var cd = Date.parse(new Date());\n                        cd = (Math.floor(cd / 36400000) * 36400000);\n                        $(element).find(':findday(\"' + cd + '\")').removeClass('wd').addClass('today');\n                        break;\n                }\n            },\n\n            // **Fill the Chart**\n            // Parse the data and fill the data panel\n            fillData: function (element, datapanel, leftpanel /* <- never used? */) {\n                var invertColor = function (colStr) {\n                    try {\n                        colStr = colStr.replace(\"rgb(\", \"\").replace(\")\", \"\");\n                        var rgbArr = colStr.split(\",\");\n                        var R = parseInt(rgbArr[0], 10);\n                        var G = parseInt(rgbArr[1], 10);\n                        var B = parseInt(rgbArr[2], 10);\n                        var gray = Math.round((255 - (0.299 * R + 0.587 * G + 0.114 * B)) * 0.9);\n                        return \"rgb(\" + gray + \", \" + gray + \", \" + gray + \")\";\n                    } catch (err) {\n                        return \"\";\n                    }\n                };\n                // Loop through the values of each data element and set a row\n                $.each(element.data, function (i, entry) {\n                    if (i >= element.pageNum * settings.itemsPerPage && i < (element.pageNum * settings.itemsPerPage + settings.itemsPerPage)) {\n\n                        $.each(entry.values, function (j, day) {\n                            var _bar = null;\n\n                            switch (settings.scale) {\n                                // **Hourly data**\n                                case \"hours\":\n                                    var dFrom = tools.genId(tools.dateDeserialize(day.from).getTime(), element.scaleStep);\n                                    var from = $(element).find('#dh-' + dFrom);\n\n                                    var dTo = tools.genId(tools.dateDeserialize(day.to).getTime(), element.scaleStep);\n                                    var to = $(element).find('#dh-' + dTo);\n\n                                    var cFrom = from.attr(\"offset\");\n                                    var cTo = to.attr(\"offset\");\n                                    var dl = Math.floor((cTo - cFrom) / tools.getCellSize()) + 1;\n\n                                    _bar = core.createProgressBar(\n                                                dl,\n                                                day.customClass ? day.customClass : \"\",\n                                                day.desc ? day.desc : \"\",\n                                                day.label ? day.label : \"\",\n                                                day.dataObj ? day.dataObj : null\n                                            );\n\n                                    // find row\n                                    var topEl = $(element).find(\"#rowheader\" + i);\n\n                                    var top = tools.getCellSize() * 5 + 2 + parseInt(topEl.attr(\"offset\"), 10);\n                                    _bar.css({ 'top': top, 'left': Math.floor(cFrom) });\n\n                                    datapanel.append(_bar);\n                                    break;\n\n                                // **Weekly data**\n                                case \"weeks\":\n                                    var dtFrom = tools.dateDeserialize(day.from);\n                                    var dtTo = tools.dateDeserialize(day.to);\n\n                                    if (dtFrom.getDate() <= 3 && dtFrom.getMonth() === 0) {\n                                        dtFrom.setDate(dtFrom.getDate() + 4);\n                                    }\n\n                                    if (dtFrom.getDate() <= 3 && dtFrom.getMonth() === 0) {\n                                        dtFrom.setDate(dtFrom.getDate() + 4);\n                                    }\n\n                                    if (dtTo.getDate() <= 3 && dtTo.getMonth() === 0) {\n                                        dtTo.setDate(dtTo.getDate() + 4);\n                                    }\n\n                                    var from = $(element).find(\"#\" + dtFrom.getWeekId());\n\n                                    var cFrom = from.attr(\"offset\");\n\n                                    var to = $(element).find(\"#\" + dtTo.getWeekId());\n                                    var cTo = to.attr(\"offset\");\n\n                                    var dl = Math.round((cTo - cFrom) / tools.getCellSize()) + 1;\n\n                                    _bar = core.createProgressBar(\n                                             dl,\n                                             day.customClass ? day.customClass : \"\",\n                                             day.desc ? day.desc : \"\",\n                                             day.label ? day.label : \"\",\n                                            day.dataObj ? day.dataObj : null\n                                        );\n\n                                    // find row\n                                    var topEl = $(element).find(\"#rowheader\" + i);\n\n                                    var top = tools.getCellSize() * 3 + 2 + parseInt(topEl.attr(\"offset\"), 10);\n                                    _bar.css({ 'top': top, 'left': Math.floor(cFrom) });\n\n                                    datapanel.append(_bar);\n                                    break;\n\n                                // **Monthly data**\n                                case \"months\":\n                                    var dtFrom = tools.dateDeserialize(day.from);\n                                    var dtTo = tools.dateDeserialize(day.to);\n\n                                    if (dtFrom.getDate() <= 3 && dtFrom.getMonth() === 0) {\n                                        dtFrom.setDate(dtFrom.getDate() + 4);\n                                    }\n\n                                    if (dtFrom.getDate() <= 3 && dtFrom.getMonth() === 0) {\n                                        dtFrom.setDate(dtFrom.getDate() + 4);\n                                    }\n\n                                    if (dtTo.getDate() <= 3 && dtTo.getMonth() === 0) {\n                                        dtTo.setDate(dtTo.getDate() + 4);\n                                    }\n\n                                    var from = $(element).find(\"#dh-\" + tools.genId(dtFrom.getTime()));\n                                    var cFrom = from.attr(\"offset\");\n                                    var to = $(element).find(\"#dh-\" + tools.genId(dtTo.getTime()));\n                                    var cTo = to.attr(\"offset\");\n                                    var dl = Math.round((cTo - cFrom) / tools.getCellSize()) + 1;\n\n                                    _bar = core.createProgressBar(\n                                        dl,\n                                        day.customClass ? day.customClass : \"\",\n                                        day.desc ? day.desc : \"\",\n                                        day.label ? day.label : \"\",\n                                        day.dataObj ? day.dataObj : null\n                                    );\n\n                                    // find row\n                                    var topEl = $(element).find(\"#rowheader\" + i);\n\n                                    var top = tools.getCellSize() * 2 + 2 + parseInt(topEl.attr(\"offset\"), 10);\n                                    _bar.css({ 'top': top, 'left': Math.floor(cFrom) });\n\n                                    datapanel.append(_bar);\n                                    break;\n\n                                // **Days**\n                                default:\n                                    var dFrom = tools.genId(tools.dateDeserialize(day.from).getTime());\n                                    var dTo = tools.genId(tools.dateDeserialize(day.to).getTime());\n\n                                    var from = $(element).find(\"#dh-\" + dFrom);\n                                    var cFrom = from.attr(\"offset\");\n\n                                    var dl = Math.floor(((dTo / 1000) - (dFrom / 1000)) / 86400) + 1;\n                                    _bar = core.createProgressBar(\n                                                dl,\n                                                day.customClass ? day.customClass : \"\",\n                                                day.desc ? day.desc : \"\",\n                                                day.label ? day.label : \"\",\n                                                day.dataObj ? day.dataObj : null\n                                        );\n\n                                    // find row\n                                    var topEl = $(element).find(\"#rowheader\" + i);\n\n                                    var top = tools.getCellSize() * 4 + 2 + parseInt(topEl.attr(\"offset\"), 10);\n                                    _bar.css({ 'top': top, 'left': Math.floor(cFrom) });\n\n                                    datapanel.append(_bar);\n\n                                    break;\n                            }\n                            var $l = _bar.find(\".fn-label\");\n                            if ($l && _bar.length) {\n                                var gray = invertColor(_bar[0].style.backgroundColor);\n                                $l.css(\"color\", gray);\n                            } else if ($l) {\n                                $l.css(\"color\", \"\");\n                            }\n                        });\n\n                    }\n                });\n            },\n            // **Navigation**\n            navigateTo: function (element, val) {\n                var $rightPanel = $(element).find(\".fn-gantt .rightPanel\");\n                var $dataPanel = $rightPanel.find(\".dataPanel\");\n                var rightPanelWidth = $rightPanel.width();\n                var dataPanelWidth = $dataPanel.width();\n\n                switch (val) {\n                    case \"begin\":\n                        $dataPanel.animate({\n                            \"margin-left\": \"0px\"\n                        }, \"fast\", function () { core.repositionLabel(element); });\n                        element.scrollNavigation.panelMargin = 0;\n                        break;\n                    case \"end\":\n                        var mLeft = dataPanelWidth - rightPanelWidth;\n                        element.scrollNavigation.panelMargin = mLeft * -1;\n                        $dataPanel.animate({\n                            \"margin-left\": \"-\" + mLeft + \"px\"\n                        }, \"fast\", function () { core.repositionLabel(element); });\n                        break;\n                    case \"now\":\n                        if (!element.scrollNavigation.canScroll || !$dataPanel.find(\".today\").length) {\n                            return false;\n                        }\n                        var max_left = (dataPanelWidth - rightPanelWidth) * -1;\n                        var cur_marg = $dataPanel.css(\"margin-left\").replace(\"px\", \"\");\n                        var val = $dataPanel.find(\".today\").offset().left - $dataPanel.offset().left;\n                        val *= -1;\n                        if (val > 0) {\n                            val = 0;\n                        } else if (val < max_left) {\n                            val = max_left;\n                        }\n                        $dataPanel.animate({\n                            \"margin-left\": val + \"px\"\n                        }, \"fast\", core.repositionLabel(element));\n                        element.scrollNavigation.panelMargin = val;\n                        break;\n                    default:\n                        var max_left = (dataPanelWidth - rightPanelWidth) * -1;\n                        var cur_marg = $dataPanel.css(\"margin-left\").replace(\"px\", \"\");\n                        var val = parseInt(cur_marg, 10) + val;\n                        if (val <= 0 && val >= max_left) {\n                            $dataPanel.animate({\n                                \"margin-left\": val + \"px\"\n                            }, \"fast\", core.repositionLabel(element));\n                        }\n                        element.scrollNavigation.panelMargin = val;\n                        break;\n                }\n            },\n\n            // Navigate to a specific page\n            navigatePage: function (element, val) {\n                if ((element.pageNum + val) >= 0 && (element.pageNum + val) < Math.ceil(element.rowsNum / settings.itemsPerPage)) {\n                    core.waitToggle(element, true, function () {\n                        element.pageNum += val;\n                        element.hPosition = $(\".fn-gantt .dataPanel\").css(\"margin-left\").replace(\"px\", \"\");\n                        element.scaleOldWidth = false;\n                        core.init(element);\n                    });\n                }\n            },\n\n            // Change zoom level\n            zoomInOut: function (element, val) {\n                core.waitToggle(element, true, function () {\n\n                    var zoomIn = (val < 0);\n\n                    var scaleSt = element.scaleStep + val * 3;\n                    scaleSt = scaleSt <= 1 ? 1 : scaleSt === 4 ? 3 : scaleSt;\n                    var scale = settings.scale;\n                    var headerRows = element.headerRows;\n                    if (settings.scale === \"hours\" && scaleSt >= 13) {\n                        scale = \"days\";\n                        headerRows = 4;\n                        scaleSt = 13;\n                    } else if (settings.scale === \"days\" && zoomIn) {\n                        scale = \"hours\";\n                        headerRows = 5;\n                        scaleSt = 12;\n                    } else if (settings.scale === \"days\" && !zoomIn) {\n                        scale = \"weeks\";\n                        headerRows = 3;\n                        scaleSt = 13;\n                    } else if (settings.scale === \"weeks\" && !zoomIn) {\n                        scale = \"months\";\n                        headerRows = 2;\n                        scaleSt = 14;\n                    } else if (settings.scale === \"weeks\" && zoomIn) {\n                        scale = \"days\";\n                        headerRows = 4;\n                        scaleSt = 13;\n                    } else if (settings.scale === \"months\" && zoomIn) {\n                        scale = \"weeks\";\n                        headerRows = 3;\n                        scaleSt = 13;\n                    }\n\n                    if ((zoomIn && $.inArray(scale, scales) < $.inArray(settings.minScale, scales))\n                        || (!zoomIn && $.inArray(scale, scales) > $.inArray(settings.maxScale, scales))) {\n                        core.init(element);\n                        return;\n                    }\n                    element.scaleStep = scaleSt;\n                    settings.scale = scale;\n                    element.headerRows = headerRows;\n                    var $rightPanel = $(element).find(\".fn-gantt .rightPanel\");\n                    var $dataPanel = $rightPanel.find(\".dataPanel\");\n                    element.hPosition = $dataPanel.css(\"margin-left\").replace(\"px\", \"\");\n                    element.scaleOldWidth = ($dataPanel.width() - $rightPanel.width());\n\n                    if (settings.useCookie) {\n                        $.cookie(this.cookieKey + \"CurrentScale\", settings.scale);\n                        // reset scrollPos\n                        $.cookie(this.cookieKey + \"ScrollPos\", null);\n                    }\n                    core.init(element);\n                });\n            },\n\n            // Move chart via mouseclick\n            mouseScroll: function (element, e) {\n                var $dataPanel = $(element).find(\".fn-gantt .dataPanel\");\n                $dataPanel.css(\"cursor\", \"move\");\n                var bPos = $dataPanel.offset();\n                var mPos = element.scrollNavigation.mouseX === null ? e.pageX : element.scrollNavigation.mouseX;\n                var delta = e.pageX - mPos;\n                element.scrollNavigation.mouseX = e.pageX;\n\n                core.scrollPanel(element, delta);\n\n                clearTimeout(element.scrollNavigation.repositionDelay);\n                element.scrollNavigation.repositionDelay = setTimeout(core.repositionLabel, 50, element);\n            },\n\n            // Move chart via mousewheel\n            wheelScroll: function (element, e) {\n                e.preventDefault(); // e is a jQuery Event\n\n                // attempts to normalize scroll wheel velocity\n                var delta = ( 'detail' in e ? e.detail :\n                              'wheelDelta' in e.originalEvent ? - 1/120 * e.originalEvent.wheelDelta :\n                              e.originalEvent.deltaY ? e.originalEvent.deltaY / Math.abs(e.originalEvent.deltaY) :\n                              e.originalEvent.detail );\n\n                // simpler normalization, ignoring per-device/browser/platform acceleration & semantic variations\n                //var delta = e.detail || - (e = e.originalEvent).wheelData || e.deltaY /* || e.deltaX */ || e.detail;\n                //delta = ( delta / Math.abs(delta) ) || 0;\n\n                core.scrollPanel(element, -50 * delta);\n\n                clearTimeout(element.scrollNavigation.repositionDelay);\n                element.scrollNavigation.repositionDelay = setTimeout(core.repositionLabel, 50, element);\n            },\n\n            // Move chart via slider control\n            sliderScroll: function (element, e) {\n                var $sliderBar = $(element).find(\".nav-slider-bar\");\n                var $sliderBarBtn = $sliderBar.find(\".nav-slider-button\");\n                var $rightPanel = $(element).find(\".fn-gantt .rightPanel\");\n                var $dataPanel = $rightPanel.find(\".dataPanel\");\n\n                var bPos = $sliderBar.offset();\n                var bWidth = $sliderBar.width();\n                var wButton = $sliderBarBtn.width();\n\n                var pos, mLeft;\n\n                if ((e.pageX >= bPos.left) && (e.pageX <= bPos.left + bWidth)) {\n                    pos = e.pageX - bPos.left;\n                    pos = pos - wButton / 2;\n                    $sliderBarBtn.css(\"left\", pos);\n\n                    mLeft = $dataPanel.width() - $rightPanel.width();\n\n                    var pPos = pos * mLeft / bWidth * -1;\n                    if (pPos >= 0) {\n                        $dataPanel.css(\"margin-left\", \"0px\");\n                        element.scrollNavigation.panelMargin = 0;\n                    } else if (pos >= bWidth - (wButton * 1)) {\n                        $dataPanel.css(\"margin-left\", mLeft * -1 + \"px\");\n                        element.scrollNavigation.panelMargin = mLeft * -1;\n                    } else {\n                        $dataPanel.css(\"margin-left\", pPos + \"px\");\n                        element.scrollNavigation.panelMargin = pPos;\n                    }\n                    clearTimeout(element.scrollNavigation.repositionDelay);\n                    element.scrollNavigation.repositionDelay = setTimeout(core.repositionLabel, 5, element);\n                }\n            },\n\n            // Update scroll panel margins\n            scrollPanel: function (element, delta) {\n                if (!element.scrollNavigation.canScroll) {\n                    return false;\n                }\n                var _panelMargin = parseInt(element.scrollNavigation.panelMargin, 10) + delta;\n                if (_panelMargin > 0) {\n                    element.scrollNavigation.panelMargin = 0;\n                    $(element).find(\".fn-gantt .dataPanel\").css(\"margin-left\", element.scrollNavigation.panelMargin + \"px\");\n                } else if (_panelMargin < element.scrollNavigation.panelMaxPos * -1) {\n                    element.scrollNavigation.panelMargin = element.scrollNavigation.panelMaxPos * -1;\n                    $(element).find(\".fn-gantt .dataPanel\").css(\"margin-left\", element.scrollNavigation.panelMargin + \"px\");\n                } else {\n                    element.scrollNavigation.panelMargin = _panelMargin;\n                    $(element).find(\".fn-gantt .dataPanel\").css(\"margin-left\", element.scrollNavigation.panelMargin + \"px\");\n                }\n                core.synchronizeScroller(element);\n            },\n\n            // Synchronize scroller\n            synchronizeScroller: function (element) {\n                if (settings.navigate === \"scroll\") {\n                    var $rightPanel = $(element).find(\".fn-gantt .rightPanel\");\n                    var $dataPanel = $rightPanel.find(\".dataPanel\");\n                    var $sliderBar = $(element).find(\".nav-slider-bar\");\n                    var $sliderBtn = $sliderBar.find(\".nav-slider-button\");\n\n                    var bWidth = $sliderBar.width();\n                    var wButton = $sliderBtn.width();\n\n                    var mLeft = $dataPanel.width() - $rightPanel.width();\n                    var hPos = 0;\n                    if ($dataPanel.css(\"margin-left\")) {\n                        hPos = $dataPanel.css(\"margin-left\").replace(\"px\", \"\");\n                    }\n                    var pos = hPos * bWidth / mLeft - $sliderBtn.width() * 0.25;\n                    pos = pos > 0 ? 0 : (pos * -1 >= bWidth - (wButton * 0.75)) ? (bWidth - (wButton * 1.25)) * -1 : pos;\n                    $sliderBtn.css(\"left\", pos * -1);\n                }\n            },\n\n            // Reposition data labels\n            repositionLabel: function (element) {\n                setTimeout(function () {\n                    var $dataPanel;\n                    if (!element) {\n                        $dataPanel = $(\".fn-gantt .rightPanel .dataPanel\");\n                    } else {\n                        var $rightPanel = $(element).find(\".fn-gantt .rightPanel\");\n                        $dataPanel = $rightPanel.find(\".dataPanel\");\n                    }\n\n                    if (settings.useCookie) {\n                        $.cookie(this.cookieKey + \"ScrollPos\", $dataPanel.css(\"margin-left\").replace(\"px\", \"\"));\n                    }\n                }, 500);\n            },\n\n            // waitToggle\n            waitToggle: function (element, show, fn) {\n                if (show) {\n                    var eo = $(element).offset();\n                    var ew = $(element).outerWidth();\n                    var eh = $(element).outerHeight();\n\n                    if (!element.loader) {\n                        element.loader = $('<div class=\"fn-gantt-loader\">'\n                        + '<div class=\"fn-gantt-loader-spinner\"><span>' + settings.waitText + '</span></div></div>');\n                    }\n                    $(element).append(element.loader);\n                    setTimeout(fn, 500);\n\n                } else {\n                    if (element.loader) {\n                        element.loader.remove();\n                    }\n                    element.loader = null;\n                }\n            }\n        };\n\n        // Utility functions\n        // =================\n        var tools = {\n\n            // Return the maximum available date in data depending on the scale\n            getMaxDate: function (element) {\n                var maxDate = null;\n                $.each(element.data, function (i, entry) {\n                    $.each(entry.values, function (i, date) {\n                        maxDate = maxDate < tools.dateDeserialize(date.to) ? tools.dateDeserialize(date.to) : maxDate;\n                    });\n                });\n                maxDate = maxDate || new Date();\n                switch (settings.scale) {\n                    case \"hours\":\n                        maxDate.setHours(Math.ceil((maxDate.getHours()) / element.scaleStep) * element.scaleStep);\n                        maxDate.setHours(maxDate.getHours() + element.scaleStep * 3);\n                        break;\n                    case \"weeks\":\n                        var bd = new Date(maxDate.getTime());\n                        var bd = new Date(bd.setDate(bd.getDate() + 3 * 7));\n                        var md = Math.floor(bd.getDate() / 7) * 7;\n                        maxDate = new Date(bd.getFullYear(), bd.getMonth(), md === 0 ? 4 : md - 3);\n                        break;\n                    case \"months\":\n                        var bd = new Date(maxDate.getFullYear(), maxDate.getMonth(), 1);\n                        bd.setMonth(bd.getMonth() + 2);\n                        maxDate = new Date(bd.getFullYear(), bd.getMonth(), 1);\n                        break;\n                    default:\n                        maxDate.setHours(0);\n                        maxDate.setDate(maxDate.getDate() + 3);\n                        break;\n                }\n                return maxDate;\n            },\n\n            // Return the minimum available date in data depending on the scale\n            getMinDate: function (element) {\n                var minDate = null;\n                $.each(element.data, function (i, entry) {\n                    $.each(entry.values, function (i, date) {\n                        minDate = minDate > tools.dateDeserialize(date.from) || minDate === null ? tools.dateDeserialize(date.from) : minDate;\n                    });\n                });\n                minDate = minDate || new Date();\n                switch (settings.scale) {\n                    case \"hours\":\n                        minDate.setHours(Math.floor((minDate.getHours()) / element.scaleStep) * element.scaleStep);\n                        minDate.setHours(minDate.getHours() - element.scaleStep * 3);\n                        break;\n                    case \"weeks\":\n                        var bd = new Date(minDate.getTime());\n                        var bd = new Date(bd.setDate(bd.getDate() - 3 * 7));\n                        var md = Math.floor(bd.getDate() / 7) * 7;\n                        minDate = new Date(bd.getFullYear(), bd.getMonth(), md === 0 ? 4 : md - 3);\n                        break;\n                    case \"months\":\n                        var bd = new Date(minDate.getFullYear(), minDate.getMonth(), 1);\n                        bd.setMonth(bd.getMonth() - 3);\n                        minDate = new Date(bd.getFullYear(), bd.getMonth(), 1);\n                        break;\n                    default:\n                        minDate.setHours(0);\n                        minDate.setDate(minDate.getDate() - 3);\n                        break;\n                }\n                return minDate;\n            },\n\n            // Return an array of Date objects between `from` and `to`\n            parseDateRange: function (from, to) {\n                var current = new Date(from.getTime());\n                var end = new Date(to.getTime()); // <- never used?\n                var ret = [];\n                var i = 0;\n                do {\n                    ret[i++] = new Date(current.getTime());\n                    current.setDate(current.getDate() + 1);\n                } while (current.getTime() <= to.getTime());\n                return ret;\n\n            },\n\n            // Return an array of Date objects between `from` and `to`,\n            // scaled hourly\n            parseTimeRange: function (from, to, scaleStep) {\n                var current = new Date(from);\n                var end = new Date(to);\n\n                // GR: Fix begin\n                current.setMilliseconds(0);\n                current.setSeconds(0);\n                current.setMinutes(0);\n                current.setHours(0);\n\n                end.setMilliseconds(0);\n                end.setSeconds(0);\n                if (end.getMinutes() > 0 || end.getHours() > 0) {\n                    end.setMinutes(0);\n                    end.setHours(0);\n                    end.setTime(end.getTime() + (86400000)); // Add day\n                }\n                // GR: Fix end\n\n                var ret = [];\n                var i = 0;\n                for(;;) {\n                    var dayStartTime = new Date(current);\n                    dayStartTime.setHours(Math.floor((current.getHours()) / scaleStep) * scaleStep);\n\n                    if (ret[i] && dayStartTime.getDay() !== ret[i].getDay()) {\n                        // If mark-cursor jumped to next day, make sure it starts at 0 hours\n                        dayStartTime.setHours(0);\n                    }\n                    ret[i] = dayStartTime;\n\n                    // Note that we use \">\" because we want to include the end-time point.\n                    if (current.getTime() > to.getTime()) break;\n\n                    /* BUG-2: current is moved backwards producing a dead-lock! (crashes chrome/IE/firefox)\n                     * SEE: https://github.com/taitems/jQuery.Gantt/issues/62\n                    if (current.getDay() !== ret[i].getDay()) {\n                       current.setHours(0);\n                    }\n                    */\n\n                    // GR Fix Begin\n                    current = ktkGetNextDate(dayStartTime, scaleStep);\n                    // GR Fix End\n\n                    i++;\n                }\n\n                return ret;\n            },\n\n            // Return an array of Date objects between a range of weeks\n            // between `from` and `to`\n            parseWeeksRange: function (from, to) {\n\n                var current = new Date(from);\n                var end = new Date(to); // <- never used?\n\n                var ret = [];\n                var i = 0;\n                do {\n                    if (current.getDay() === 0) {\n                        ret[i++] = current.getDayForWeek();\n                    }\n                    current.setDate(current.getDate() + 1);\n                } while (current.getTime() <= to.getTime());\n\n                return ret;\n            },\n\n\n            // Return an array of Date objects between a range of months\n            // between `from` and `to`\n            parseMonthsRange: function (from, to) {\n\n                var current = new Date(from);\n                var end = new Date(to); // <- never used?\n\n                var ret = [];\n                var i = 0;\n                do {\n                    ret[i++] = new Date(current.getFullYear(), current.getMonth(), 1);\n                    current.setMonth(current.getMonth() + 1);\n                } while (current.getTime() <= to.getTime());\n\n                return ret;\n            },\n\n            // Deserialize a date from a string or integer\n            dateDeserialize: function (date) {\n                if (typeof date === \"string\") {\n                    date = date.replace(/\\/Date\\((.*)\\)\\//, \"$1\");\n                    date = $.isNumeric(date) ? parseInt(date, 10) : $.trim(date);\n                }\n                return new Date( date );\n            },\n\n            // Generate an id for a date\n            genId: function (ticks) {\n                var t = new Date(ticks);\n                switch (settings.scale) {\n                    case \"hours\":\n                        var hour = t.getHours();\n                        if (arguments.length >= 2) {\n                            hour = (Math.floor((t.getHours()) / arguments[1]) * arguments[1]);\n                        }\n                        return (new Date(t.getFullYear(), t.getMonth(), t.getDate(), hour)).getTime();\n                    case \"weeks\":\n                        var y = t.getFullYear();\n                        var w = t.getDayForWeek().getWeekOfYear();\n                        var m = t.getMonth();\n                        if (m === 11 && w === 1) {\n                            y++;\n                        }\n                        return y + \"-\" + w;\n                    case \"months\":\n                        return t.getFullYear() + \"-\" + t.getMonth();\n                    default:\n                        return (new Date(t.getFullYear(), t.getMonth(), t.getDate())).getTime();\n                }\n            },\n\n            // normalizes an array of dates into a map of start-of-day millisecond values\n            _datesToDays: function ( dates ) {\n                var dayMap = {};\n                for (var i = 0, len = dates.length, day; i < len; i++) {\n                    day = tools.dateDeserialize( dates[i] );\n                    dayMap[ day.setHours(0, 0, 0, 0) ] = true;\n                }\n                return dayMap;\n            },\n            // Returns true when the given date appears in the array of holidays, if provided\n            isHoliday: (function() { // IIFE\n                // short-circuits the function if no holidays option was passed\n                if (!settings.holidays) {\n                  return function () { return false; };\n                }\n                var holidays = false;\n                // returns the function that will be used to check for holidayness of a given date\n                return function(date) {\n                    if (!holidays) {\n                      holidays = tools._datesToDays( settings.holidays );\n                    }\n                    return !!holidays[\n                      // assumes numeric dates are already normalized to start-of-day\n                      $.isNumeric(date) ?\n                      date :\n                      ( new Date(date.getFullYear(), date.getMonth(), date.getDate()) ).getTime()\n                    ];\n                };\n            })(),\n\n            // Get the current cell size\n            _getCellSize: null,\n            getCellSize: function () {\n                if (!tools._getCellSize) {\n                    $(\"body\").append(\n                        $('<div style=\"display: none; position: absolute;\" class=\"fn-gantt\" id=\"measureCellWidth\"><div class=\"row\"></div></div>')\n                    );\n                    tools._getCellSize = $(\"#measureCellWidth .row\").height();\n                    $(\"#measureCellWidth\").empty().remove();\n                }\n                return tools._getCellSize;\n            },\n\n            // Get the current size of the right panel\n            getRightPanelSize: function () {\n                $(\"body\").append(\n                    $('<div style=\"display: none; position: absolute;\" class=\"fn-gantt\" id=\"measureCellWidth\"><div class=\"rightPanel\"></div></div>')\n                );\n                var ret = $(\"#measureCellWidth .rightPanel\").height();\n                $(\"#measureCellWidth\").empty().remove();\n                return ret;\n            },\n\n            // Get the current page height\n            getPageHeight: function (element) {\n                return element.pageNum + 1 === element.pageCount ? element.rowsOnLastPage * tools.getCellSize() : settings.itemsPerPage * tools.getCellSize();\n            },\n\n            // Get the current margin size of the progress bar\n            _getProgressBarMargin: null,\n            getProgressBarMargin: function () {\n                if (!tools._getProgressBarMargin && tools._getProgressBarMargin !== 0) {\n                    $(\"body\").append(\n                        $('<div style=\"display: none; position: absolute;\" id=\"measureBarWidth\" ><div class=\"fn-gantt\"><div class=\"rightPanel\"><div class=\"dataPanel\"><div class=\"row day\"><div class=\"bar\" /></div></div></div></div></div>')\n                    );\n                    tools._getProgressBarMargin = parseInt($(\"#measureBarWidth .fn-gantt .rightPanel .day .bar\").css(\"margin-left\").replace(\"px\", \"\"), 10);\n                    tools._getProgressBarMargin += parseInt($(\"#measureBarWidth .fn-gantt .rightPanel .day .bar\").css(\"margin-right\").replace(\"px\", \"\"), 10);\n                    $(\"#measureBarWidth\").empty().remove();\n                }\n                return tools._getProgressBarMargin;\n            }\n        };\n\n\n        this.each(function () {\n            this.data = null;        // Received data\n            this.pageNum = 0;        // Current page number\n            this.pageCount = 0;      // Available pages count\n            this.rowsOnLastPage = 0; // How many rows on last page\n            this.rowsNum = 0;        // Number of total rows\n            this.hPosition = 0;      // Current position on diagram (Horizontal)\n            this.dateStart = null;\n            this.dateEnd = null;\n            this.scrollClicked = false;\n            this.scaleOldWidth = null;\n            this.headerRows = null;\n\n            // Update cookie with current scale\n            if (settings.useCookie) {\n                var sc = $.cookie(this.cookieKey + \"CurrentScale\");\n                if (sc) {\n                    settings.scale = $.cookie(this.cookieKey + \"CurrentScale\");\n                } else {\n                    $.cookie(this.cookieKey + \"CurrentScale\", settings.scale);\n                }\n            }\n\n            switch (settings.scale) {\n                //case \"hours\": this.headerRows = 5; this.scaleStep = 8; break;\n                case \"hours\": this.headerRows = 5; this.scaleStep = 1; break;\n                case \"weeks\": this.headerRows = 3; this.scaleStep = 13; break;\n                case \"months\": this.headerRows = 2; this.scaleStep = 14; break;\n                default: this.headerRows = 4; this.scaleStep = 13; break;\n            }\n\n            this.scrollNavigation = {\n                panelMouseDown: false,\n                scrollerMouseDown: false,\n                mouseX: null,\n                panelMargin: 0,\n                repositionDelay: 0,\n                panelMaxPos: 0,\n                canScroll: true\n            };\n\n            this.gantt = null;\n            this.loader = null;\n\n            core.create(this);\n\n        });\n\n    };\n})(jQuery);\n"]}